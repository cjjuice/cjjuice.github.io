<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code 1337]]></title>
  <link href="http://cjjuice.github.io/atom.xml" rel="self"/>
  <link href="http://cjjuice.github.io/"/>
  <updated>2014-06-10T19:21:45-04:00</updated>
  <id>http://cjjuice.github.io/</id>
  <author>
    <name><![CDATA[C.J. Bordeleau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming 101: Part 1, Getting to Know Your Medium]]></title>
    <link href="http://cjjuice.github.io/blog/2014/06/09/programming-101-part-1/"/>
    <updated>2014-06-09T20:10:25-04:00</updated>
    <id>http://cjjuice.github.io/blog/2014/06/09/programming-101-part-1</id>
    <content type="html"><![CDATA[<p>Programming is as much an art as it is a science. The artistic quality
and thrill of building a program to do your bidding is at the heart of
every great programmer. If this sounds obsessively awesome to
you, then you may have what it takes to join our craft.</p>

<p>To start you on this path, we must first look at our medium. Every art
has a medium, from painting to film to theater, the medium is the
material that the art is created on. For programming the medium is most
certainty the modern computer. Before you can begin to understand the
art of programming, you must first understand the medium that is the
computer.</p>

<h2>Parts of a computer</h2>

<h3>CPU (Central Processing Unit)</h3>

<p>The CPU is often referred to as the &ldquo;brains&rdquo; behind the computer. It is
here where the code you write is transformed into &ldquo;machine code&rdquo; or the
lowest level representation of computer code. A CPU today most likely has
multiple cores which are able to process requests concurrently (or at the
same time). A CPU&rsquo;s clock rate is the rate which it can perform
operations in a specified amount of time.</p>

<h3>RAM (Random Access Memory)</h3>

<p>RAM or random access memory is one of two types of storage modern
computers have. RAM is special because it is able to read and write at a
faster speed then your hard drive. Making it crucial for your CPU to run
efficiently. RAM typically ranges currently in variations of 4GB &ndash; 16GB.</p>

<h3>Hard Drive</h3>

<p>The hard drive is the main method of persistent storage on a computer.
It is where, your programs, your code and all your saved documents are
located and saved for future use. It can hold much more storage than
RAM, however it is substantially slower to interact with. It is not
rare today to see hard drives sporting at least 500GB &ndash; 1TB+ of
storage.</p>

<p>If any one of these components fills up or gets sent more work than it
can handle, the computer will grind to halt and/or crash.</p>

<h4>Next Time</h4>

<p>Next time we will dive into the basics and history of the terminal,
 or how programmers most often interact with their computers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leveraging Rails Partials to Render Content via AJAX]]></title>
    <link href="http://cjjuice.github.io/blog/2014/05/29/leveraging-rails-partials-to-render-content-via-ajax/"/>
    <updated>2014-05-29T19:24:34-04:00</updated>
    <id>http://cjjuice.github.io/blog/2014/05/29/leveraging-rails-partials-to-render-content-via-ajax</id>
    <content type="html"><![CDATA[<p>Adding dynamic content to a page via AJAX can easily become a code intensive
experence. You may have seen it go down a little like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># app/assets/javascripts/weather.js.coffee</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">eventHandler: </span><span class="nf">(event) -&gt;</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Request JSON from rails</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span>
</span><span class='line'>      <span class="nv">url: </span><span class="s">&#39;weather/fetch&#39;</span>
</span><span class='line'>      <span class="nv">type: </span><span class="s">&#39;GET&#39;</span>
</span><span class='line'>      <span class="nv">dataType: </span><span class="s">&#39;JSON&#39;</span>
</span><span class='line'>      <span class="nv">success: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>        <span class="nb">window</span><span class="p">.</span><span class="nv">currentWeather = </span><span class="nx">data</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Construct HTML string for new content</span>
</span><span class='line'>        <span class="nx">htmlString</span> <span class="o">+=</span> <span class="s">&quot;&lt;div id=&quot;</span><span class="nx">temp</span><span class="s">&quot;&gt; </span><span class="si">#{</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">temp_f</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;F&quot;</span><span class="si">}</span><span class="s"> &lt;/div&gt;&quot;</span>
</span><span class='line'>        <span class="nx">htmlString</span> <span class="o">+=</span> <span class="s">&quot;&lt;div id=&quot;</span><span class="nx">weather</span><span class="o">-</span><span class="nx">icon</span><span class="s">&quot;&gt;&quot;</span>
</span><span class='line'>        <span class="nx">htmlString</span> <span class="o">+=</span> <span class="s">&quot;&lt;div class=&#39;&quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">icon</span> <span class="o">+</span> <span class="s">&quot;-icon&#39;&gt;&lt;/div&gt;&quot;</span>
</span><span class='line'>        <span class="nx">htmlString</span> <span class="o">+=</span> <span class="s">&quot;&lt;/div&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Insert new content into DOM </span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s">&quot;</span><span class="err">#</span><span class="s">weather-container&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">htmlString</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that even a simple bit of content can quickly start to
resemble the flying spagettii monster when attempting to construct it&rsquo;s HTML in this way.</p>

<p>You: Hey Rails?! Can you throw me a bone here?</p>

<p>Rails: Yo dawg, I thought you&rsquo;d never ask.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/routes.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;weather/fetch&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;weather#fetch&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/weather_controller.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fetch</span>
</span><span class='line'>  <span class="vi">@user_location</span> <span class="o">||=</span> <span class="no">Location</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">remote_ip</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="ss">WeatherUnderground</span><span class="p">:</span><span class="ss">:API</span><span class="o">.</span><span class="n">current_conditions</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@user_location</span><span class="o">.</span><span class="n">latitude</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="vi">@user_location</span><span class="o">.</span><span class="n">longitude</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">render</span> <span class="ss">partial</span><span class="p">:</span> <span class="s2">&quot;partials/weather&quot;</span><span class="p">,</span> <span class="ss">locals</span><span class="p">:</span> <span class="p">{</span><span class="n">weather_data</span><span class="p">:</span> <span class="n">data</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">// app/views/partials/_weather.haml</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#temp</span>
</span><span class='line'>  <span class="p">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">weather_data</span><span class="o">[</span><span class="s2">&quot;temp_f&quot;</span><span class="o">].</span><span class="n">round</span><span class="si">}</span><span class="s2">F&quot;</span>
</span><span class='line'><span class="nc">.icon</span><span class="p">{</span><span class="ss">class</span><span class="p">:</span> <span class="n">data</span><span class="o">[</span><span class="s2">&quot;icon&quot;</span><span class="o">]</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># app/assets/javascripts/weather.js.coffee</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">eventHandler: </span><span class="nf">(event) -&gt;</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Request HTML from rails partial we made</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span>
</span><span class='line'>      <span class="nv">url: </span><span class="s">&#39;weather/fetch&#39;</span>
</span><span class='line'>      <span class="nv">type: </span><span class="s">&#39;GET&#39;</span>
</span><span class='line'>      <span class="nv">dataType: </span><span class="s">&#39;HTML&#39;</span>
</span><span class='line'>      <span class="nv">success: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>        <span class="c1"># Insert new content into DOM </span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s">&quot;</span><span class="err">#</span><span class="s">weather-container&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">responseText</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think this approach sets you up for creating much cleaner and
more maintainable code that will last for the long haul. Just add some slick
animations for a nice ease in effect.</p>

<p>Let me know in the comments your approach!</p>
]]></content>
  </entry>
  
</feed>
